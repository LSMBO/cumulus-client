<?xml version="1.0" encoding="UTF-8"?>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified">

    <xs:attributeGroup name="ParamAttributes">
        <xs:attribute name="name" type="xs:string" use="required" />
        <xs:attribute name="label" type="xs:string" use="required" />
        <xs:attribute name="help" type="xs:string" use="optional" />
        <xs:attribute name="hidden" type="xs:boolean" use="optional" /> <!-- deprecated, use 'visibility' instead -->
        <xs:attribute name="command" type="xs:string" use="optional" />
        <xs:attribute name="config_path" type="xs:string" use="optional" /> <!-- if 'convert_config_to', this value will be the path to the current parameter (use '.' to indicate multiple levels) -->
        <xs:attribute name="visibility" type="xs:string" use="optional" /> <!-- if 'advanced', the parameter will be hidden in the gui, and a button will turn them visible, if 'hidden' it will be there but not be displayed -->
    </xs:attributeGroup>

    <xs:element name="param" abstract="true" />

    <xs:complexType name="ParamSelect">
        <xs:sequence minOccurs="0">
            <xs:element maxOccurs="unbounded" name="option">
                <xs:complexType>
                    <xs:simpleContent>
                        <xs:extension base="xs:string">
                            <xs:attribute name="value" type="xs:string" use="required" />
                            <xs:attribute name="selected" type="xs:boolean" use="optional" />
                            <xs:attribute name="command" type="xs:string" use="optional" />
                        </xs:extension>
                    </xs:simpleContent>
                </xs:complexType>
            </xs:element>
        </xs:sequence>
        <xs:attributeGroup ref="ParamAttributes" />
    </xs:complexType>
    <xs:element name="select" type="ParamSelect" substitutionGroup="param" />

		<!-- similar to a 'select', but used to display a list of checkboxes -->
    <xs:complexType name="ParamChecklist">
        <xs:sequence minOccurs="0">
            <xs:element maxOccurs="unbounded" name="option">
                <xs:complexType>
                    <xs:simpleContent>
                        <xs:extension base="xs:string">
                            <xs:attribute name="value" type="xs:string" use="required" />
														<xs:attribute name="selected" type="xs:boolean" use="optional" />
                            <xs:attribute name="command" type="xs:string" use="optional" />
                        </xs:extension>
                    </xs:simpleContent>
                </xs:complexType>
            </xs:element>
        </xs:sequence>
        <xs:attributeGroup ref="ParamAttributes" />
    </xs:complexType>
    <xs:element name="checklist" type="ParamChecklist" substitutionGroup="param" />

		<!-- similar to a 'select', but used to display a list of rows with each two textboxes (one for the key, one for the value)
			new lines can be added by the user
			each option can have only one value, but if is_list is true the options with same keys will be merged into arrays (user do not know that)
		-->
    <xs:complexType name="ParamKeyvalues">
        <xs:sequence minOccurs="0">
            <xs:element maxOccurs="unbounded" name="option">
                <xs:complexType>
                    <xs:simpleContent>
                        <xs:extension base="xs:string">
							<xs:attribute name="key" type="xs:string" use="required" />
                            <xs:attribute name="value" type="xs:string" use="required" />
                            <xs:attribute name="command" type="xs:string" use="optional" />
                        </xs:extension>
                    </xs:simpleContent>
                </xs:complexType>
            </xs:element>
        </xs:sequence>
        <xs:attribute name="label_key" type="xs:string" use="required" />
        <xs:attribute name="label_value" type="xs:string" use="required" />
        <xs:attribute name="placeholder_key" type="xs:string" use="optional" />
        <xs:attribute name="placeholder_value" type="xs:string" use="optional" />
        <xs:attribute name="type_of" type="xs:string" use="optional" /> <!-- default is string, can be one of [integer,float,string] -->
        <xs:attribute name="is_list" type="xs:boolean" use="optional" />
        <xs:attributeGroup ref="ParamAttributes" />
    </xs:complexType>
    <xs:element name="keyvalues" type="ParamKeyvalues" substitutionGroup="param" />
    
    <xs:complexType name="ParamCheckbox">
        <xs:attribute name="value" type="xs:boolean" use="required" />
        <xs:attribute name="command_if_unchecked" type="xs:string" use="optional" />
        <xs:attributeGroup ref="ParamAttributes" />
    </xs:complexType>
    <xs:element name="checkbox" type="ParamCheckbox" substitutionGroup="param" />
    
    <xs:complexType name="ParamString">
        <xs:attribute name="value" type="xs:string" use="optional" />
        <xs:attribute name="placeholder" type="xs:string" use="optional" />
        <xs:attributeGroup ref="ParamAttributes" />
    </xs:complexType>
    <xs:element name="string" type="ParamString" substitutionGroup="param" />
    
    <xs:complexType name="ParamNumber">
        <xs:attribute name="value" type="xs:decimal" use="optional" />
        <xs:attribute name="min" type="xs:decimal" use="optional" />
        <xs:attribute name="max" type="xs:decimal" use="optional" />
        <xs:attribute name="step" type="xs:decimal" use="optional" />
        <xs:attribute name="placeholder" type="xs:string" use="optional" />
        <xs:attributeGroup ref="ParamAttributes" />
    </xs:complexType>
    <xs:element name="number" type="ParamNumber" substitutionGroup="param" />
    
    <xs:complexType name="ParamRange">
        <xs:attribute name="value" type="xs:decimal" use="optional" />
        <xs:attribute name="value2" type="xs:decimal" use="optional" />
        <xs:attribute name="min" type="xs:decimal" use="optional" />
        <xs:attribute name="max" type="xs:decimal" use="optional" />
        <xs:attribute name="step" type="xs:decimal" use="optional" />
        <xs:attribute name="placeholder" type="xs:string" use="optional" />
        <xs:attribute name="placeholder2" type="xs:string" use="optional" />
        <xs:attributeGroup ref="ParamAttributes" />
    </xs:complexType>
    <xs:element name="range" type="ParamRange" substitutionGroup="param" />
    
    <xs:complexType name="ParamFileList">
        <xs:attribute name="multiple" type="xs:boolean" use="required" />
        <xs:attribute name="is_folder" type="xs:boolean" use="required" />
        <xs:attribute name="is_raw_input" type="xs:boolean" use="required" /> <!-- TODO rename to is_shared -->
        <xs:attribute name="convert_to_mzml" type="xs:boolean" use="optional" />
        <xs:attribute name="value" type="xs:string" use="optional" />
        <xs:attribute name="format" type="xs:string" use="optional" /> <!-- multiple formats can be given, separated by ";", only put the extensions, for instance 'fasta;txt' -->
        <xs:attribute name="placeholder" type="xs:string" use="optional" />
        <xs:attribute name="repeated_command" type="xs:string" use="optional" />
        <xs:attributeGroup ref="ParamAttributes" />
    </xs:complexType>
    <xs:element name="filelist" type="ParamFileList" substitutionGroup="param" />
    
    <xs:complexType name="ParamText">
        <xs:attribute name="level" type="xs:string" use="optional" />
        <xs:attributeGroup ref="ParamAttributes" />
    </xs:complexType>
    <xs:element name="text" type="ParamText" substitutionGroup="param" />

    <!-- Define the 'when' element -->
    <xs:complexType name="whenType">
        <xs:annotation>
            <xs:documentation xml:lang="en">Contains a list of parameters</xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element ref="param" minOccurs="1" maxOccurs="unbounded" />
        </xs:sequence>
        <xs:attribute name="value" type="xs:string" use="required" /> <!-- if the condition is a checkbox, use 'true' and 'false' values -->
    </xs:complexType>
    <xs:element name="when" type="whenType" />

    <!-- Define the 'conditional' element -->
    <xs:complexType name="conditionalType">
        <xs:annotation>
            <xs:documentation xml:lang="en">In this element, we have a "param" followed by one or more "when". When the value of the "param" matches one the "when", its content will be displayed and the others will be hidden</xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element ref="param" />
            <xs:element name="when" type="whenType" minOccurs="1" maxOccurs="unbounded" />
        </xs:sequence>
        <xs:attribute name="name" type="xs:string" use="required" />
    </xs:complexType>
    <xs:element name="conditional" type="conditionalType" />

    <!-- Define the 'section' element -->
    <xs:complexType name="sectionType">
        <xs:annotation>
            <xs:documentation xml:lang="en">A section contains a list of params or conditionals, the title will be displayed on top</xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:choice maxOccurs="unbounded">
                <xs:element ref="param" />
                <xs:element name="conditional" type="conditionalType" />
            </xs:choice>
        </xs:sequence>
        <xs:attribute name="name" type="xs:string" use="required" />
        <xs:attribute name="title" type="xs:string" use="required" />
        <xs:attribute name="expanded" type="xs:boolean" use="optional" />
        <xs:attribute name="hidden" type="xs:boolean" use="optional" /> <!-- deprecated, use 'visibility' instead -->
        <xs:attribute name="visibility" type="xs:string" use="optional" /> <!-- if 'advanced', the parameter will be hidden in the gui, and a button will turn them visible, if 'hidden' it will be there but not be displayed -->
        <xs:attribute name="help" type="xs:string" use="optional" />
    </xs:complexType>
    <xs:element name="section" type="sectionType" />

    <!-- Define the root element -->
    <xs:complexType name="toolType">
        <xs:annotation>
            <xs:documentation xml:lang="en">Root element, will only contain a list of "section"</xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="section" type="sectionType" minOccurs="1" maxOccurs="unbounded" />
        </xs:sequence>
        <xs:attribute name="id" type="xs:string" use="required" />
        <xs:attribute name="name" type="xs:string" use="required" />
        <xs:attribute name="version" type="xs:string" use="required" />
        <xs:attribute name="end_tag" type="xs:string" use="required" /> <!-- will be used to check in stdout if the command is finished -->
        <xs:attribute name="command" type="xs:string" use="required" /> <!-- will be used to start the command line, it's possible to set default arguments already there -->
        <xs:attribute name="convert_config_to" type="xs:string" use="optional" /> <!-- creates a file with the given format (yaml/json) in the job folder. Must be added in the 'command' with the variable %config-file% -->
        <xs:attribute name="description" type="xs:string" use="optional" />
        <xs:attribute name="category" type="xs:string" use="optional" /> <!-- not used for now, may help if there are many apps in the future; first category should be for apps currently in development -->
        <xs:attribute name="hidden" type="xs:boolean" use="optional" /> <!-- used to tell if an app is still displayed or not -->
    </xs:complexType>
    <xs:element name="tool" type="toolType" />

</xs:schema>
